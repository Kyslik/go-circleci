// Code generated by MockGen. DO NOT EDIT.
// Source: pipeline.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	circleci "github.com/grezar/go-circleci"
)

// MockPipelines is a mock of Pipelines interface.
type MockPipelines struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinesMockRecorder
}

// MockPipelinesMockRecorder is the mock recorder for MockPipelines.
type MockPipelinesMockRecorder struct {
	mock *MockPipelines
}

// NewMockPipelines creates a new mock instance.
func NewMockPipelines(ctrl *gomock.Controller) *MockPipelines {
	mock := &MockPipelines{ctrl: ctrl}
	mock.recorder = &MockPipelinesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelines) EXPECT() *MockPipelinesMockRecorder {
	return m.recorder
}

// Continue mocks base method.
func (m *MockPipelines) Continue(ctx context.Context, options circleci.PipelineContinueOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Continue", ctx, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Continue indicates an expected call of Continue.
func (mr *MockPipelinesMockRecorder) Continue(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Continue", reflect.TypeOf((*MockPipelines)(nil).Continue), ctx, options)
}

// Get mocks base method.
func (m *MockPipelines) Get(ctx context.Context, pipelineID string) (*circleci.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, pipelineID)
	ret0, _ := ret[0].(*circleci.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPipelinesMockRecorder) Get(ctx, pipelineID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPipelines)(nil).Get), ctx, pipelineID)
}

// GetConfig mocks base method.
func (m *MockPipelines) GetConfig(ctx context.Context, pipelineID string) (*circleci.PipelineConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, pipelineID)
	ret0, _ := ret[0].(*circleci.PipelineConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockPipelinesMockRecorder) GetConfig(ctx, pipelineID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockPipelines)(nil).GetConfig), ctx, pipelineID)
}

// List mocks base method.
func (m *MockPipelines) List(ctx context.Context, options circleci.PipelineListOptions) (*circleci.PipelineList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].(*circleci.PipelineList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPipelinesMockRecorder) List(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPipelines)(nil).List), ctx, options)
}

// ListWorkflows mocks base method.
func (m *MockPipelines) ListWorkflows(ctx context.Context, pipelineID string, options circleci.PipelineListWorkflowsOptions) (*circleci.WorkflowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", ctx, pipelineID, options)
	ret0, _ := ret[0].(*circleci.WorkflowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows.
func (mr *MockPipelinesMockRecorder) ListWorkflows(ctx, pipelineID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockPipelines)(nil).ListWorkflows), ctx, pipelineID, options)
}
