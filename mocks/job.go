// Code generated by MockGen. DO NOT EDIT.
// Source: job.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	circleci "github.com/grezar/go-circleci"
)

// MockJobs is a mock of Jobs interface.
type MockJobs struct {
	ctrl     *gomock.Controller
	recorder *MockJobsMockRecorder
}

// MockJobsMockRecorder is the mock recorder for MockJobs.
type MockJobsMockRecorder struct {
	mock *MockJobs
}

// NewMockJobs creates a new mock instance.
func NewMockJobs(ctrl *gomock.Controller) *MockJobs {
	mock := &MockJobs{ctrl: ctrl}
	mock.recorder = &MockJobsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobs) EXPECT() *MockJobsMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockJobs) Cancel(ctx context.Context, projectSlug, jobNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, projectSlug, jobNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockJobsMockRecorder) Cancel(ctx, projectSlug, jobNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockJobs)(nil).Cancel), ctx, projectSlug, jobNumber)
}

// Get mocks base method.
func (m *MockJobs) Get(ctx context.Context, projectSlug, jobNumber string) (*circleci.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, projectSlug, jobNumber)
	ret0, _ := ret[0].(*circleci.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockJobsMockRecorder) Get(ctx, projectSlug, jobNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockJobs)(nil).Get), ctx, projectSlug, jobNumber)
}

// ListArtifacts mocks base method.
func (m *MockJobs) ListArtifacts(ctx context.Context, projectSlug, jobNumber string) (*circleci.ArtifactList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifacts", ctx, projectSlug, jobNumber)
	ret0, _ := ret[0].(*circleci.ArtifactList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockJobsMockRecorder) ListArtifacts(ctx, projectSlug, jobNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockJobs)(nil).ListArtifacts), ctx, projectSlug, jobNumber)
}

// ListTestMetadata mocks base method.
func (m *MockJobs) ListTestMetadata(ctx context.Context, projectSlug, jobNumber string) (*circleci.TestMetadataList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestMetadata", ctx, projectSlug, jobNumber)
	ret0, _ := ret[0].(*circleci.TestMetadataList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestMetadata indicates an expected call of ListTestMetadata.
func (mr *MockJobsMockRecorder) ListTestMetadata(ctx, projectSlug, jobNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestMetadata", reflect.TypeOf((*MockJobs)(nil).ListTestMetadata), ctx, projectSlug, jobNumber)
}
