// Code generated by MockGen. DO NOT EDIT.
// Source: workflow.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	circleci "github.com/grezar/go-circleci"
)

// MockWorkflows is a mock of Workflows interface.
type MockWorkflows struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowsMockRecorder
}

// MockWorkflowsMockRecorder is the mock recorder for MockWorkflows.
type MockWorkflowsMockRecorder struct {
	mock *MockWorkflows
}

// NewMockWorkflows creates a new mock instance.
func NewMockWorkflows(ctrl *gomock.Controller) *MockWorkflows {
	mock := &MockWorkflows{ctrl: ctrl}
	mock.recorder = &MockWorkflowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflows) EXPECT() *MockWorkflowsMockRecorder {
	return m.recorder
}

// ApproveJob mocks base method.
func (m *MockWorkflows) ApproveJob(ctx context.Context, id, approvalRequestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveJob", ctx, id, approvalRequestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveJob indicates an expected call of ApproveJob.
func (mr *MockWorkflowsMockRecorder) ApproveJob(ctx, id, approvalRequestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveJob", reflect.TypeOf((*MockWorkflows)(nil).ApproveJob), ctx, id, approvalRequestID)
}

// Cancel mocks base method.
func (m *MockWorkflows) Cancel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockWorkflowsMockRecorder) Cancel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockWorkflows)(nil).Cancel), ctx, id)
}

// Get mocks base method.
func (m *MockWorkflows) Get(ctx context.Context, id string) (*circleci.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*circleci.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWorkflowsMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorkflows)(nil).Get), ctx, id)
}

// ListWorkflowJobs mocks base method.
func (m *MockWorkflows) ListWorkflowJobs(ctx context.Context, id string) (*circleci.WorkflowJobList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowJobs", ctx, id)
	ret0, _ := ret[0].(*circleci.WorkflowJobList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowJobs indicates an expected call of ListWorkflowJobs.
func (mr *MockWorkflowsMockRecorder) ListWorkflowJobs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowJobs", reflect.TypeOf((*MockWorkflows)(nil).ListWorkflowJobs), ctx, id)
}

// Rerun mocks base method.
func (m *MockWorkflows) Rerun(ctx context.Context, id string, options circleci.WorkflowRerunOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rerun", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rerun indicates an expected call of Rerun.
func (mr *MockWorkflowsMockRecorder) Rerun(ctx, id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rerun", reflect.TypeOf((*MockWorkflows)(nil).Rerun), ctx, id, options)
}
