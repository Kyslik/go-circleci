// Code generated by MockGen. DO NOT EDIT.
// Source: context.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	circleci "github.com/grezar/go-circleci"
)

// MockContexts is a mock of Contexts interface.
type MockContexts struct {
	ctrl     *gomock.Controller
	recorder *MockContextsMockRecorder
}

// MockContextsMockRecorder is the mock recorder for MockContexts.
type MockContextsMockRecorder struct {
	mock *MockContexts
}

// NewMockContexts creates a new mock instance.
func NewMockContexts(ctrl *gomock.Controller) *MockContexts {
	mock := &MockContexts{ctrl: ctrl}
	mock.recorder = &MockContextsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContexts) EXPECT() *MockContextsMockRecorder {
	return m.recorder
}

// AddOrUpdateVariable mocks base method.
func (m *MockContexts) AddOrUpdateVariable(ctx context.Context, contextID, variableName string, options circleci.AddOrUpdateVariableOptions) (*circleci.ContextVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateVariable", ctx, contextID, variableName, options)
	ret0, _ := ret[0].(*circleci.ContextVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrUpdateVariable indicates an expected call of AddOrUpdateVariable.
func (mr *MockContextsMockRecorder) AddOrUpdateVariable(ctx, contextID, variableName, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateVariable", reflect.TypeOf((*MockContexts)(nil).AddOrUpdateVariable), ctx, contextID, variableName, options)
}

// Create mocks base method.
func (m *MockContexts) Create(ctx context.Context, options circleci.ContextCreateOptions) (*circleci.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, options)
	ret0, _ := ret[0].(*circleci.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContextsMockRecorder) Create(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContexts)(nil).Create), ctx, options)
}

// Delete mocks base method.
func (m *MockContexts) Delete(ctx context.Context, contextID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, contextID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContextsMockRecorder) Delete(ctx, contextID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContexts)(nil).Delete), ctx, contextID)
}

// Get mocks base method.
func (m *MockContexts) Get(ctx context.Context, contextID string) (*circleci.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, contextID)
	ret0, _ := ret[0].(*circleci.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContextsMockRecorder) Get(ctx, contextID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContexts)(nil).Get), ctx, contextID)
}

// List mocks base method.
func (m *MockContexts) List(ctx context.Context, options circleci.ContextListOptions) (*circleci.ContextList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].(*circleci.ContextList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockContextsMockRecorder) List(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockContexts)(nil).List), ctx, options)
}

// ListVariables mocks base method.
func (m *MockContexts) ListVariables(ctx context.Context, contextID string) (*circleci.ContextVariableList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVariables", ctx, contextID)
	ret0, _ := ret[0].(*circleci.ContextVariableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVariables indicates an expected call of ListVariables.
func (mr *MockContextsMockRecorder) ListVariables(ctx, contextID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariables", reflect.TypeOf((*MockContexts)(nil).ListVariables), ctx, contextID)
}

// RemoveVariable mocks base method.
func (m *MockContexts) RemoveVariable(ctx context.Context, contextID, variableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVariable", ctx, contextID, variableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVariable indicates an expected call of RemoveVariable.
func (mr *MockContextsMockRecorder) RemoveVariable(ctx, contextID, variableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVariable", reflect.TypeOf((*MockContexts)(nil).RemoveVariable), ctx, contextID, variableName)
}
